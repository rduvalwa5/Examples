Notes on testing Python Scripts:

Links:
	https://docs.python.org/2/library/array.html?highlight=array#module-array
	https://docs.python.org/3/library/unittest.html
	https://docs.python.org/3/library/string.html?highlight=string#module-string
	https://docs.python.org/3/library/stdtypes.html#string-methods
This is how to reverse a string
	http://stackoverflow.com/questions/18686860/reverse-a-string-in-python-without-using-reversed-or-1



A.  Command Line:
	C1246895-Air:src rduvalwa2$ pwd
	/Users/rduvalwa2/DevTools/eclipse-luna/workspace/OReilly_Python/Examples/PythonExamples/src

Example Command line individual test:
	C1246895-Air:src rduvalwa2$ python3.4 -m unittest test_array
	----------------------------------------------------------------------
	Ran 10 tests in 0.001s
	OK

Example Command line all test found through discover:
	C1246895-Air:src rduvalwa2$ python3.4 -m unittest discover
	----------------------------------------------------------------------
	Ran 22 tests in 0.017s
	OK
	
	C1246895-Air:src rduvalwa2$ ls -l *test*.py
	-rw-r--r--  1 rduvalwa2  staff  2096 Mar 27 00:22 test_PyString.py
	-rw-r--r--  1 rduvalwa2  staff  2088 Mar 26 19:15 test_arr_array.py
	-rw-r--r--  1 rduvalwa2  staff  4354 Apr  2 11:01 test_array.py

*****************************************************************************************	
	This is for support of continuous integration scripts:
	https://docs.python.org/3/library/unittest.html
	26.3.2. Command-Line Interface
	The unittest module can be used from the command line to run tests from modules, classes or even individual test methods:
	
	python -m unittest test_module1 test_module2
	python -m unittest test_module.TestClass
	python -m unittest test_module.TestClass.test_method
	You can pass in a list with any combination of module names, and fully qualified class or method names.

	Test modules can be specified by file path as well:
	python -m unittest tests/test_something.py

	This allows you to use the shell filename completion to specify the test module. 
	The file specified must still be importable as a module. The path is converted to a module name by removing the ‘.py’ 
	and converting path separators into ‘.’. If you want to execute a test file that isn’t importable as a module you should 
	execute the file directly instead.

	You can run tests with more detail (higher verbosity) by passing in the -v flag:
	Example:
	python -m unittest -v test_module

	When executed without arguments Test Discovery is started:
	Example:
	python -m unittest

	For a list of all the command-line options:
	python -m unittest -h
	
	Changed in version 3.2: In earlier versions it was only possible to run individual test methods and not modules or classes.

	26.3.2.1. Command-line options
	unittest supports these command-line options:
	-b, --buffer
	The standard output and standard error streams are buffered during the test run. Output during a passing test 
	is discarded. Output is echoed normally on test fail or error and is added to the failure messages.

	-c, --catch
	Control-C during the test run waits for the current test to end and then reports all the results so far. 
	A second control-C raises the normal KeyboardInterrupt exception.

	See Signal Handling for the functions that provide this functionality.

	-f, --failfast
	Stop the test run on the first error or failure.

	New in version 3.2: The command-line options -b, -c and -f were added.
	The command line can also be used for test discovery, for running all of the tests in a project or just a subset.

	26.3.3. Test Discovery
	New in version 3.2.
	Unittest supports simple test discovery. In order to be compatible with test discovery, all of the test files must 
	be modules or packages (including namespace packages) importable from the top-level directory of the project 
	(this means that their filenames must be valid identifiers).

	Test discovery is implemented in TestLoader.discover(), but can also be used from the command line. 
	The basic command-line usage is:
	cd project_directory
	python -m unittest discover
	Note As a shortcut, python -m unittest is the equivalent of python -m unittest discover. 
	If you want to pass arguments to test discovery the discover sub-command must be used explicitly.

	The discover sub-command has the following options:
	-v, --verbose
	Verbose output

	-s, --start-directory directory
	Directory to start discovery (. default)

	-p, --pattern pattern
	Pattern to match test files (test*.py default)

	-t, --top-level-directory directory
	Top level directory of project (defaults to start directory)

	The -s, -p, and -t options can be passed in as positional arguments in that order. 
	The following two command lines are equivalent:

	python -m unittest discover -s project_directory -p '*_test.py'
	python -m unittest discover project_directory '*_test.py'
	As well as being a path it is possible to pass a package name, for example myproject.subpackage.test, as the start
	directory. The package name you supply will then be imported and its location on the filesystem will be used as the 
	start directory.

	Caution Test discovery loads tests by importing them. Once test discovery has found all the test files from the start directory
	you specify it turns the paths into package names to import. For example foo/bar/baz.py will be imported as foo.bar.baz.
	If you have a package installed globally and attempt test discovery on a different copy of the package then the import 
	could happen from the wrong place. If this happens test discovery will warn you and exit.
	If you supply the start directory as a package name rather than a path to a directory then discover assumes that 
	whichever location it imports from is the location you intended, so you will not get the warning.
	Test modules and packages can customize test loading and discovery by through the load_tests protocol.

	Changed in version 3.4: Test discovery supports namespace packages.

